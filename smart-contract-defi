pragma solidity ^0.8.0;

contract AssetTracking {
    struct Asset {
        uint256 id;
        string name;
        address currentOwner;
        uint256 timestamp;
        string location;
    }

    mapping(uint256 => Asset) public assets;
    uint256 public assetCount;

    event AssetTransferred(uint256 assetId, address from, address to, string newLocation, uint256 timestamp);

    // Function to register a new asset
    function registerAsset(string memory _name, string memory _location) public {
        assetCount++;
        assets[assetCount] = Asset(assetCount, _name, msg.sender, block.timestamp, _location);
    }

    // Function to transfer asset ownership
    function transferAsset(uint256 _assetId, address _newOwner, string memory _newLocation) public {
        require(msg.sender == assets[_assetId].currentOwner, "Only the current owner can transfer this asset");
        assets[_assetId].currentOwner = _newOwner;
        assets[_assetId].location = _newLocation;
        assets[_assetId].timestamp = block.timestamp;

        emit AssetTransferred(_assetId, msg.sender, _newOwner, _newLocation, block.timestamp);
    }

    // Function to fetch asset details
    function getAsset(uint256 _assetId) public view returns (Asset memory) {
        return assets[_assetId];
    }
}
